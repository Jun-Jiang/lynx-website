# Lynx

> Lynx is a leading cross-platform development tech stack to empower the web community to build cross-platform applications.


## blog

- [Lynx: Lynx Blog](https://lynxjs.org/blog/index.md): Latest articles and release announcements about Lynx; features article 'Lynx: Unlock Native for More'; easily accessible for updates.
- [Lynx: Unlock Native for More](https://lynxjs.org/blog/lynx-unlock-native-for-more.md): Empowers devs to use web skills for native UIs; enables building once for multiple platforms, offers instant rendering & responsive scripting; familiar web - like dev with markup & CSS.


## api



## guide

- [Lynx: Quick Start](https://lynxjs.org/guide/start/quick-start.md): Begin Lynx project development; create project with `create-rspeedy`, prepare Lynx Explorer; step - by - step setup for starting development and debugging.
- [Lynx: Composing Elements](https://lynxjs.org/guide/ui/elements-components.md): Build basic views using Lynx's elements; use element tags with attributes, nest them, and form element trees; easy understanding through examples and diagrams.
- [Lynx: Styling with CSS](https://lynxjs.org/guide/ui/styling.md): Styles Lynx pages using CSS; enables setting properties via selectors and inline styles, supports nesting syntax; easy to use with `-x-` prefixed properties for style design.
- [Lynx: Understanding Layout](https://lynxjs.org/guide/ui/layout/index.md): Learn Lynx's layout system; use properties for sizing, layout, alignment, and positioning; intuitive with examples for various layout types.
- [Guide: UI - Linear Layout](https://lynxjs.org/guide/ui/layout/linear-layout.md): Simplified sequential child arrangement; inspired by Android's linear layout, uses display: linear, set direction, align axes, specify dynamic sizes; easy to understand layout process.
- [Guide: Flexible Box Layout](https://lynxjs.org/guide/ui/layout/flexible-box-layout.md): Make child elements adapt to parent space; Features include filling with `flex - grow`, shrinking with `flex - shrink`, and wrapping with `flex - wrap`; supports common flex layout properties, mostly aligns with Web standards.
- [Guide: UI - Grid Layout](https://lynxjs.org/guide/ui/layout/grid-layout.md): Ideal for responsive, 2D staggered layouts; Build grids via steps like setting display, specifying sizes, gaps, and alignments; Follows web standards with some property exceptions; easy understanding with basic concepts explained.
- [Guide: UI/Relative Layout](https://lynxjs.org/guide/ui/layout/relative-layout.md): Layout for easy relative position control between parent/children or siblings; set display, IDs, edge & relative position, and center properties; offers convenient, efficient layout with best practices.
- [Guide: Managing Scrolling](https://lynxjs.org/guide/ui/scrolling.md): Deals with overflow behavior in UI; can crop overflow with `overflow` property or make content scrollable; offers `<scroll-view>` for basic scroll, `<list>` for large data & complex layout; easy to choose right component for scroll needs.
- [Lynx: Event Handling](https://lynxjs.org/guide/interaction/event-handling.md): Web - like event mechanism; supports dual - threaded event processing (main or background thread); easy to listen for user clicks and handle events with detailed event objects.
- [Lynx: Visibility detection](https://lynxjs.org/guide/interaction/visibility-detection.md): Detect node visibility; offers unique exposure & Web - like intersection observer; easy to monitor node exposure or intersection with provided interfaces.
- [Lynx: Networking](https://lynxjs.org/guide/interaction/networking.md): Facilitates remote resource loading in mobile apps; uses Fetch API like web for requests (GET, POST etc.) and handling responses; easy to use with familiar async/await syntax.
- [Lynx: Instant First-Frame Rendering (IFR)](https://lynxjs.org/guide/interaction/ifr.md): Displays page content directly on load, avoiding white screens; achieved via dual - thread architecture; simple to implement with basic and host - data - based examples, enhancing user experience.
- [Guide: Visual Appearance](https://lynxjs.org/guide/styling/appearance.md): Manipulate background, borders, colors, gradients, clipping, and masking; use CSS properties like `background-image`, `border-radius`; easily define and apply visual styles.
- [Lynx: Motion](https://lynxjs.org/guide/styling/animation.md): Offers extensive motion capabilities for modern UIs; can add transitions for layout/style changes, use keyframes for complex effects, and create flexible keyframe animations in JS; transitions are easy to use and automatically triggered.
- [Lynx: Theming](https://lynxjs.org/guide/styling/custom-theming.md): Manage themes seamlessly; switch themes using CSS descendant selectors, CSS variables; enables CSS inheritance as needed for simplified complex - style page development.
- [Lynx: Typography](https://lynxjs.org/guide/styling/text-and-typography.md): Manage text in Lynx; style text with CSS properties, mix text with images/views, and handle text truncation; use built - in elements and CSS properties easily.
- [Guide: Accessibility](https://lynxjs.org/guide/inclusion/accessibility.md): Design concept for mobile app accessibility; Lynx encapsulates cross - platform interfaces; easy to integrate features like tagging, specifying traits, adjusting reading order, and handling focus.
- [Guide: Internationalization](https://lynxjs.org/guide/inclusion/internationalization.md): Enables localization for diverse users; supports i18next with features like dynamic loading, caching; offers easy - to - use API for ReactLynx internationalization.
- [Lynx: Lynx DevTool](https://lynxjs.org/guide/debugging/lynx-devtool.md): Collection of performance & debugging tools for Lynx apps; enables inspection & modification of elements, JavaScript debugging, and layer analysis; easy setup via step - by - step instructions.
- [Lynx: Handle Errors](https://lynxjs.org/guide/debugging/handle-errors.md): Learn to recognize errors in Lynx tools; use LogBox for quick error overviews and DevTool for better dev experience; handle errors in code with error lists and examples.
- [Lynx: Performance](https://lynxjs.org/guide/performance.md): Discusses making Lynx pages faster; focuses on maximizing runtime efficiency and fluid user experience; aids in understanding and improving both User Perceived and Application Runtime Performance.
- [Guide: Compatibility](https://lynxjs.org/guide/compatibility.md): Ensures version compatibility between Bundle and Lynx Engine; build from source or set `engineVersion` for multi - version support; handles version - related issues like new/deprecated features, and uses compatibility tables.
- [Lynx: JavaScript Runtime](https://lynxjs.org/guide/scripting-runtime/index.md): Features dual - thread architecture; Main thread uses PrimJS, background uses PrimJS (Android) or JavaScriptCore (iOS); Supports ES10 on main, ES6 on background, with SWC for syntax transform, and polyfills on iOS; easy module use with ESModule and CommonJS.
- [Guide: Main Thread Runtime](https://lynxjs.org/guide/scripting-runtime/main-thread-runtime.md): Uses PrimJS as runtime engine; offers high - performance FFI and bytecode - based script format; Element PAPI and Lynx API bindings with performance - optimized design.
- [Lynx: Native Modules](https://lynxjs.org/guide/use-native-modules.md): Connect JavaScript with native code; enables use of native platform APIs not covered by Lynx; steps include declaring typed interface, writing Lynx app & native platform code.
- [Lynx: Custom Element](https://lynxjs.org/guide/custom-native-component.md): Extend Lynx with custom native elements; build native code for iOS, Android, and web; use custom elements like built - in ones; requires prior Lynx setup and element basics knowledge.
- [Guide: Embedding LynxView into Native View](https://lynxjs.org/guide/embed-lynx-to-native.md): Embed LynxView in native views; set size constraints like fixed or flexible size; easy to use as full - screen or non - full - screen view.
- [Lynx: Using Data from Host Platform](https://lynxjs.org/guide/use-data-from-host-platform.md): Provide and update data for Lynx - enabled apps; Consume data on frontend with React hooks or class components; Easily process data before use with default or named data processors.
- [Guide: Living Specification](https://lynxjs.org/guide/spec.md): Presents a living specification; enables visual exploration of the spec content; offers an easy - to - access way to view the specification through the provided HTML viewer.
- [Guide: Custom Native Element - Android Implementation](https://lynxjs.org/guide/custom-native-component/custom-component-android.md): Outlines custom native element implementation; involves steps like declaring/registering, creating views, handling styles/properties, event binding; provides code examples for easy understanding.
- [Guide: Implementing Custom Native Components on iOS](https://lynxjs.org/guide/custom-native-component/custom-component-iOS.md): Learn to implement custom native elements on iOS; capabilities include element declaration/registration, native view creation, style/property handling, event binding; detailed code examples simplify the process.
- [Guide: Custom Native Component - Custom Component Web](https://lynxjs.org/guide/custom-native-component/custom-component-web.md): Customize web elements; refers to Web Components for customization; straightforward reference to standard web technology.
- [Lynx: iOS Native Module](https://lynxjs.org/guide/custom-native-modules/native-module-ios.md): Guide to creating iOS native modules; involves preparing Xcode project, implementing module in Objective - C or Swift, registering in Lynx runtime; step - by - step instructions for easy implementation.
- [Lynx: Android Native Local Storage Module](https://lynxjs.org/guide/custom-native-modules/native-module-android.md): Guide to creating an Android native local storage module; involves creating module files in Java or Kotlin, registering with Lynx runtime; clear instructions for each step.
- [Lynx DevTool: Elements Panel](https://lynxjs.org/guide/debugging/lynx-devtool/elements-panel.md): Inspect and modify elements & element tree; view/change CSS, navigate tree with keyboard; easy access via Lynx DevTool desktop app.
- [Lynx DevTool: Console Panel](https://lynxjs.org/guide/debugging/lynx-devtool/console-panel.md): Use to view logged messages and run JavaScript; view JavaScript & client logs, filter messages, run code in REPL; simple to operate with clear options to open, set, and clear.
- [Lynx DevTool: Sources Panel](https://lynxjs.org/guide/debugging/lynx-devtool/sources-panel.md): Use for JavaScript debugging; has sections for file navigation, code editing, and debugging tools; offers breakpoint management, code stepping, and source map debugging, with straightforward steps for main thread debugging.
- [Lynx Devtool: Layers Panel](https://lynxjs.org/guide/debugging/lynx-devtool/layers-panel.md): Helps understand Lynx page composition; enables viewing and inspecting page layers; easy access via command menu or more tools options.
- [Guide: Embedding Lynx in Native - Fixed - Android](https://lynxjs.org/guide/embed-lynx-to-native/embed-lynx-to-native-fixed-android.md): Fix LynxView size on Android; set outer container constraint to `EXACTLY`; directly specify size or fix parent node size and set to `MATCH_PARENT`.
- [Guide: Embed Lynx to Native - Fixed iOS](https://lynxjs.org/guide/embed-lynx-to-native/embed-lynx-to-native-fixed-iOS.md): Set fixed LynxView size in iOS; use `LynxViewBuilder#frame` or `preferredLayoutWidth/Height` with `layoutWidth/HeightMode`; straightforward code implementation for size fixing.
- [Guide: Embed Lynx to Native - Android Flex](https://lynxjs.org/guide/embed-lynx-to-native/embed-lynx-to-native-flex-android.md): Aligns layout constraints with Android views; allows LynxView size to adapt to content via WRAP_CONTENT; straightforward layout parameter setting in Java.
- [Guide: Embed Lynx to Native - iOS Flex Layout](https://lynxjs.org/guide/embed-lynx-to-native/embed-lynx-to-native-flex-iOS.md): LynxView size adaptation for iOS; allows avoiding frame setting or setting layout width/height mode to undefined or max; straightforward size configuration via code.
- [Guide: Embed Lynx to Native (Android - Size Constraints and Layout)](https://lynxjs.org/guide/embed-lynx-to-native/embed-lynx-to-native-mode-android.md): Get size constraints in `onMeasure` method; handle different `View.MeasureSpec` values; preset width and height to trigger layout early; easy integration with Android view system.
- [Guide: Embedding Lynx in Native iOS](https://lynxjs.org/guide/embed-lynx-to-native/embed-lynx-to-native-mode-iOS.md): Set LynxView size constraints on iOS; two methods - using `updateViewportWithPreferredLayoutWidth` etc. and `lynxviewbuilder#frame`; supported constraint modes include undefined, exact, and max.
- [Lynx: Event Propagation](https://lynxjs.org/guide/interaction/event-handling/event-propagation.md): Understand how events propagate; core capabilities include capture, bubbling, and interception; set event - handler properties for easy event handling across components.
- [Guide: Direct Manipulation of Elements in React](https://lynxjs.org/guide/interaction/event-handling/manipulating-element.react.md): Enables direct element manipulation; core capabilities include handling in background and main threads, obtaining references via selectors; offers intuitive API calls for easy element access and modification.
- [Guide: Exposure Ability](https://lynxjs.org/guide/interaction/visibility-detection/exposure-ability.md): Observes target node visibility changes; triggers exposure/anti - exposure events; enables page - wide or single - node monitoring; easy to control detection with properties and methods.
- [Guide: Intersection Observer](https://lynxjs.org/guide/interaction/visibility-detection/intersection-observer.md): Monitors intersection status between target & reference/ancestor nodes; trigger callbacks on status change; simple 4 - step process for developers to observe intersection changes.
- [Guide: Interaction - Storage](https://lynxjs.org/guide/interaction/storage.md): No description available as content is empty; unable to identify core capabilities; no ease - of - use statement available as content is empty.
- [Lynx: Evaluating Performance](https://lynxjs.org/guide/performance/evaluating-performance.md): Measures Lynx page performance; evaluates user - perceived & application runtime performance; provides easy - to - use Performance API for custom & built - in metric analysis.
- [Lynx: Marking Lynx Pipeline](https://lynxjs.org/guide/performance/timing-flag.md): Monitor Lynx Pipeline performance for key components; Set `__lynx_timing_flag` to mark pipelines, generate `PipelineEntry` events; Clear usage rules and example for easy implementation.
- [Lynx: Integrate with Existing Android Apps](https://lynxjs.org/guide/start/fragments/android/integrating-lynx-with-existing-app-android.md): Integrate Lynx into existing Android apps; configure dependencies, initialize environment, render LynxView; clear steps for setup and integration.
- [Lynx: Integrate Lynx with Existing Apps (iOS)](https://lynxjs.org/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.md): Guides iOS integration; configures dependencies with Cocoapods, initializes Lynx environment, and renders LynxView; uses Cocoapods for easy dependency management.
- [Lynx: Integrate Lynx with Existing Apps (Web)](https://lynxjs.org/guide/start/fragments/web/integrating-lynx-with-web.md): Integrate Lynx apps into existing web projects; build web artifacts and integrate with new projects; step - by - step instructions simplify the integration process.
- [Guide: Integrating Lynx DevTool](https://lynxjs.org/guide/start/integrate-lynx-devtool.md): Steps to integrate Lynx DevTool for debugging; add dependencies, register service (Android only), enable debugging switches; code examples available in GitHub repo.
- [Lynx: Advanced DevTool Configurations](https://lynxjs.org/guide/start/integrate-lynx-devtool-advanced.md): Integrate DevTool switch page; helps quickly view or set DevTool; customizable to diversify DevTool configuration.
- [Lynx: Integrate with Existing Apps](https://lynxjs.org/guide/start/integrate-with-existing-apps.md): Integrate Lynx engine with native mobile or web apps; load Lynx apps via Lynx views; provides platform - specific integration steps for iOS, Android, and web.
- [Lynx: Tutorial - Product Gallery](https://lynxjs.org/guide/start/tutorial-gallery.md): Build a product gallery page; learn to create components, add interactivity, use scrolling elements, and manage styles; designed for hands - on Lynx beginners.
- [Guide: Tutorial - Payment Details](https://lynxjs.org/guide/start/tutorial-payment-details.md): Likely a tutorial on payment details; No specific capabilities identified from given content; Content not sufficient to determine ease - of - use statement.
- [Tutorial: Product Detail](https://lynxjs.org/guide/start/tutorial-product-detail.md): Implement a swiper component; learn direct node manipulation, main thread script for latency reduction, and communication/value - passing between main and background threads; simplifies code with hooks for better maintainability.
- [Lynx: Glossary](https://lynxjs.org/guide/glossary.md): Describes technical terms in Lynx development; defines SDK (Engine and Framework), Lynx Platform, and various threads; helps understand Lynx - related concepts.


## React

- [React on Lynx](https://lynxjs.org/react/index.md): Idiomatic React on Lynx; Develop Lynx apps with familiar React; Easy start with provided guides.
- [React: What is ReactLynx?](https://lynxjs.org/react/introduction.md): Official React framework for Lynx; enables native app dev with React mental model; core features include idiomatic React, dual - threaded optimizations, and JSX constant folding; easy for React web devs to transition.
- [React: Thinking in ReactLynx](https://lynxjs.org/react/thinking-in-reactlynx.md): ReactLynx follows React model, uses Lynx's dual - threaded runtimes; code runs on main & background threads with specific capabilities; clear rules for code execution on each thread simplify development.
- [React: Rendering Process and Lifecycle](https://lynxjs.org/react/lifecycle.md): Optimizes rendering for mobile; dual - thread architecture divides tasks for performance; lifecycle hooks async, no `useLayoutEffect` support; `<list />` child components have on - demand loading and node reuse.
- [React: Main Thread Script](https://lynxjs.org/react/main-thread-script.md): Addresses Lynx's event response delay; enables smooth animations and gesture handling; simplifies event synchronization on the main thread for near - native interactivity.
- [React: Code Splitting](https://lynxjs.org/react/code-splitting.md): Enables code splitting in React projects; supports lazy - loading components and standalone projects; simplifies lazy - loading implementation with React's Suspense and dynamic imports.
- [React: Data Fetching](https://lynxjs.org/react/data-fetching.md): Retrieve data from external sources in ReactLynx apps; uses Lynx's Fetch API with differences from Web Fetch API, can integrate with TanStack Query; simplifies data fetching and state management.
- [React: State Management - Jotai](https://lynxjs.org/react/state-management/jotai.md): Atomic approach to global React state management; involves installation via 'install jotai' command, provides example of state usage; easy to understand and implement with provided examples.
- [React: State Management - Zustand](https://lynxjs.org/react/state-management/zustand.md): State management solution for React; based on React Hooks, offers flexible and conventional API; easy to install and use with simple examples.
- [React: State Management - Valtio](https://lynxjs.org/react/state-management/valtio.md): Proxy - based state management; offers fine - grained subscriptions and reactivity; simple to use with easy - to - follow examples and straightforward installation.
- [React: Routing](https://lynxjs.org/react/routing.md): Enables single - page routing in React; Configures routes with `<Routes>` and `<Route>`; Navigates with `useNavigate`, accesses URL values via `useParams` and `useLocation`; straightforward setup with React Router v6.
- [React: Tutorial: Payment Details](https://lynxjs.org/react/payment-details.md): Learn advanced Lynx features through a payment details page; Core capabilities include building interactive scrolling lists, creating 3D animations, and passing data between components; Step - by - step guidance for implementation.


## rspeedy

- [Rspeedy: Index](https://lynxjs.org/rspeedy/index.md): No content provided in source; unable to extract detailed information; no information on ease - of - use.
- [Rspeedy: CLI](https://lynxjs.org/rspeedy/cli.md): Lightweight CLI for Rspeedy; main commands include `dev`, `build`, `inspect`, `preview`; easy to use with global installation and version selector feature.
- [Rspeedy: Styling](https://lynxjs.org/rspeedy/styling.md): Offers multiple application styling methods; supports CSS Modules, Global CSS, pre - processors (Sass/Less/Stylus), PostCSS, and Tailwind CSS; default support for CSS Modules with easy configuration.
- [Rspeedy: TypeScript](https://lynxjs.org/rspeedy/typescript.md): Supports TypeScript by default; enables path aliases, custom `tsconfig.json` paths; provides type declarations. Easy setup with `create - rspeedy` handling common configurations.
- [Rspeedy: Static Assets](https://lynxjs.org/rspeedy/assets.md): Manages static assets like images, fonts, media; allows import in JS and CSS, has URL prefix settings, public folder support; easy to configure inlining and extend asset types.
- [Rspeedy: Output Files](https://lynxjs.org/rspeedy/output.md): Explains output file directory structure; covers default production/development layouts, types of output files; offers easy configs to modify directories and filenames.
- [Rspeedy: Module Resolution](https://lynxjs.org/rspeedy/resolve.md): Simplifies module imports with concise paths; enables environment - aware module substitution; offers easy - to - use path aliases for module referencing.
- [Rspeedy: Plugin](https://lynxjs.org/rspeedy/plugin.md): Leverages Rsbuild's powerful plugin system; developers can register hooks, transform code, modify configurations; find and use Rsbuild/Rspack/Webpack plugins; easy plugin integration.
- [Rspeedy: Upgrade](https://lynxjs.org/rspeedy/upgrade.md): Guides on upgrading Rspeedy dependencies; uses `upgrade-rspeedy` tool to upgrade to latest, specific, or canary versions; straightforward version - upgrading process.
- [Rspeedy: Build Profiling](https://lynxjs.org/rspeedy/build-profiling.md): Analyze performance bottlenecks; uses Rsdoctor, Node.js profiling, and Rspack profiling; easy steps for profiling with clear commands.
- [Rspeedy: Use Rsdoctor](https://lynxjs.org/rspeedy/use-rsdoctor.md): Build analyzer for Rspeedy; visualizes compilation, analyzes build artifacts & times, supports custom rules; easily enabled via env var in dev/build commands.


## Optional

- [Contribute to Lynx](https://github.com/lynx-family/lynx): The github repository to host Lynx development and the guildlines to follow.
